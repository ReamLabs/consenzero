use consensus_beacon_state::beacon_state::BeaconState;
use consensus_common::{beacon_block::BeaconBlock, funcs::ProcessBlockHeaderOutput, proof::Proof};
// // These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// // The ELF is used for proving and the ID is used for verification.
use methods::{CONSENSUS_STF_ELF, CONSENSUS_STF_ID};
use ream_consensus::deneb::beacon_block::BeaconBlock as ReamBeaconBlock;
use ream_consensus::deneb::beacon_state::BeaconState as ReamBeaconState;
use risc0_zkvm::{default_prover, ExecutorEnv};
use snap::raw::Decoder;
use ssz::Decode;
use ssz_rs::prelude::*;
use tree_hash::TreeHash;

#[tokio::main]
async fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // Read and decompress pre-state SSZ snappy file
    let ssz_snappy = std::fs::read(format!("host/src/data/basic_block_header/pre.ssz_snappy"))
        .expect("cannot find post-fork test asset");
    let mut decoder = Decoder::new();
    let pre_state_ssz = decoder.decompress_vec(&ssz_snappy).unwrap();
    let pre_state = ReamBeaconState::from_ssz_bytes(&pre_state_ssz).unwrap();

    let pre_state_ssz_rs = BeaconState::from(pre_state.clone());
    assert_eq!(
        pre_state_ssz_rs.hash_tree_root().unwrap(),
        pre_state.tree_hash_root()
    );

    // Read and decompress block SSZ snappy file
    let block_ssz_snappy =
        std::fs::read(format!("host/src/data/basic_block_header/block.ssz_snappy"))
            .expect("cannot find block test asset");
    let mut decoder = Decoder::new();
    let block_ssz = decoder.decompress_vec(&block_ssz_snappy).unwrap();
    let block = ReamBeaconBlock::from_ssz_bytes(&block_ssz).unwrap();

    let block_ssz_rs = BeaconBlock::from(block.clone());
    assert_eq!(
        block_ssz_rs.hash_tree_root().unwrap(),
        block.tree_hash_root()
    );
    let mut block_ssz = vec![];
    block_ssz_rs.serialize(&mut block_ssz).unwrap();

    // Create merkle proofs
    let pre_state_root = pre_state_ssz_rs.hash_tree_root().unwrap();

    let slot_path = &["slot".into()];
    let (slot_proof, slot_witness) = pre_state_ssz_rs.prove(slot_path).unwrap();
    let slot_proof = Proof::new(slot_proof, slot_witness);

    let mut latest_block_header_ssz: Vec<u8> = vec![];
    pre_state_ssz_rs
        .latest_block_header
        .serialize(&mut latest_block_header_ssz)
        .unwrap();
    let latest_block_header_path = &["latest_block_header".into()];
    let (latest_block_header_proof, latest_block_header_witness) =
        pre_state_ssz_rs.prove(latest_block_header_path).unwrap();
    let latest_block_header_proof =
        Proof::new(latest_block_header_proof, latest_block_header_witness);
        
    let validator_slashed = pre_state_ssz_rs
        .validators
        .get(pre_state_ssz_rs.get_beacon_proposer_index().unwrap() as usize)
        .unwrap()
        .slashed;

    let validator_path = &[
        "validators".into(),
        (pre_state_ssz_rs.get_beacon_proposer_index().unwrap() as usize).into(),
    ];
    let (validator_slashed_proof, validator_witness) =
        pre_state_ssz_rs.prove(validator_path).unwrap();
    let _validator_slashed_proof = Proof::new(validator_slashed_proof, validator_witness);

    //
    // zkVM operations
    //

    // Build the zkVM guest environment
    let env = ExecutorEnv::builder()
        .write(&pre_state_root)
        .unwrap()
        .write(&pre_state_ssz_rs.slot)
        .unwrap()
        .write(&slot_proof)
        .unwrap()
        .write(&latest_block_header_ssz)
        .unwrap()
        .write(&latest_block_header_proof)
        .unwrap()
        .write(&validator_slashed)
        .unwrap()
        // TODO: The zkVM must support 64-bit in order to pass in VALIDATOR_REGISTRY_LIMIT index of size 2^40
        // .write(&validator_proof)
        // .unwrap()
        .write(&pre_state_ssz_rs.get_beacon_proposer_index().unwrap())
        .unwrap()
        .write(&block_ssz)
        .unwrap()
        .build()
        .unwrap();

    // Run the state transition

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, CONSENSUS_STF_ELF).unwrap();

    // Extract the receipt.
    let receipt = prove_info.receipt;

    // // For example:
    let output: ProcessBlockHeaderOutput = receipt.journal.decode().unwrap();

    println!("Receipt journal: {:?}", output);

    assert_eq!(output.pre_state_root, pre_state_root);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(CONSENSUS_STF_ID).unwrap();
}
