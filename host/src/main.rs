// // These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// // The ELF is used for proving and the ID is used for verification.
use methods::{CONSENSUS_STF_ELF, CONSENSUS_STF_ID};
use ream_consensus::deneb::beacon_state::BeaconState;
use ream_consensus::deneb::beacon_block::BeaconBlock;
use risc0_zkvm::{default_prover, ExecutorEnv};
use snap::raw::Decoder;
use ssz::Decode;

#[tokio::main]
async fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // Read and decompress pre-state SSZ snappy file
    let ssz_snappy = std::fs::read(format!("host/src/data/basic_block_header/pre.ssz_snappy"))
        .expect("cannot find post-fork test asset");
    let mut decoder = Decoder::new();
    let pre_state_ssz = decoder.decompress_vec(&ssz_snappy).unwrap();
    let pre_state = BeaconState::from_ssz_bytes(&pre_state_ssz).unwrap();

    // Read and decompress block SSZ snappy file
    let block_ssz_snappy = std::fs::read(format!("host/src/data/basic_block_header/block.ssz_snappy"))
        .expect("cannot find block test asset");
    let mut decoder = Decoder::new();
    let block_ssz = decoder.decompress_vec(&block_ssz_snappy).unwrap();
    let block = BeaconBlock::from_ssz_bytes(&block_ssz).unwrap();

    //
    // zkVM operations
    //

    // Build the zkVM guest environment
    let env = ExecutorEnv::builder()
        .write(&pre_state)
        .unwrap()
        .write(&block)
        .unwrap()
        .build()
        .unwrap();

    // Run the state transition

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, CONSENSUS_STF_ELF).unwrap();

    // Extract the receipt.
    let receipt = prove_info.receipt;

    // For example:
    let output: BeaconState = receipt.journal.decode().unwrap();

    println!("Receipt journal: {:?}", output);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(CONSENSUS_STF_ID).unwrap();
}
