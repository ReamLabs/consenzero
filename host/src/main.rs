// // These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// // The ELF is used for proving and the ID is used for verification.
use methods::{CONSENSUS_STF_ELF, CONSENSUS_STF_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use clap::Parser;
use ream_consensus::deneb::beacon_state::BeaconState;
use ssz::Decode;

mod beacon_client;
use beacon_client::BeaconNodeHttpClient;

mod cli;
use cli::ProviderArgs;

#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct Args {
    /// Fetch the state and block from the RPC
    #[clap(long)]
    rpc: bool,

    /// Fetch the state and block from local files
    #[clap(long)]
    local: bool,

    #[clap(flatten)]
    provider: ProviderArgs,
}

#[tokio::main]
async fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let args = Args::parse();

    if args.rpc == args.local {
        eprintln!("Error: You must specify either --rpc or --local");
        std::process::exit(1);
    }

    let pre_state =
        if args.rpc {
            let beacon_client = BeaconNodeHttpClient::new(args.provider.rpc_url.unwrap());

            let head_slot = beacon_client.get_beacon_head_slot().await.unwrap();
        
            println!("head slot: {:?}", &head_slot);
        
            //
            // Fetch state by ssz
            //
        
            let pre_state_ssz = beacon_client.get_beacon_state_ssz(head_slot).await.unwrap();
            // println!("pre-state ssz: {:?}", &pre_state_ssz);
        
            let pre_state = BeaconState::from_ssz_bytes(&pre_state_ssz);
            println!("pre-state: {:#?}", &pre_state);
        
            //
            // Fetch state by json
            //
        
            // let pre_state = beacon_client.get_beacon_state(head_slot).await;
            // println!("pre-state: {:?}", &pre_state);

            // Deserialize the struct
            let value = std::fs::read_to_string(format!("host/src/data/BeaconState/value.yaml"))
                .expect("cannot find test asset");
            serde_yaml::from_str::<BeaconState>(&value).unwrap()

        } else {
            // Deserialize the struct
            let value = std::fs::read_to_string(format!("host/src/data/BeaconState/value.yaml"))
                .expect("cannot find test asset");
            serde_yaml::from_str::<BeaconState>(&value).unwrap()
        };
    
    // 
    // zkVM operations
    // 

    // // Build the zkVM guest environment
    // let env = ExecutorEnv::builder()
    //     .write(&pre_state)
    //     .unwrap()
    //     .build()
    //     .unwrap();

    // // Run the state transition

    // // Obtain the default prover.
    // let prover = default_prover();

    // // Proof information by proving the specified ELF binary.
    // // This struct contains the receipt along with statistics about execution of the guest
    // let prove_info = prover.prove(env, CONSENSUS_STF_ELF).unwrap();

    // // Extract the receipt.
    // let receipt = prove_info.receipt;

    // // TODO: Implement code for retrieving receipt journal here.
    // // For example:
    // let output: BeaconState = receipt.journal.decode().unwrap();

    // println!("Receipt journal: {}", output.slot);

    // // The receipt was verified at the end of proving, but the below code is an
    // // example of how someone else could verify this receipt.
    // receipt.verify(CONSENSUS_STF_ID).unwrap();
}

// fn mock_state(slot_number: u64) -> BeaconState {
//     BeaconState {
//         genesis_time: 0,
//         genesis_validators_root: alloy_primitives::fixed_bytes!("0000000000000000000000000000000000000000000000000000000000000000"),
//         slot: slot_number,
//         // fork: Fork,

//         // // History
//         // latest_block_header: BeaconBlockHeader,
//         // block_roots: FixedVector<B256, U8192>,
//         // state_roots: FixedVector<B256, U8192>,
//         // /// Frozen in Capella, replaced by historical_summaries
//         // historical_roots: VariableList<B256, U16777216>,

//         // // Eth1
//         // eth1_data: Eth1Data,
//         // eth1_data_votes: VariableList<Eth1Data, U2048>,
//         eth1_deposit_index: 0,

//         // // Registry
//         // validators: VariableList<Validator, U1099511627776>,
//         // #[serde(deserialize_with = "ssz_types::serde_utils::quoted_u64_var_list::deserialize")]
//         // balances: VariableList<u64, U1099511627776>,

//         // // Randomness
//         // randao_mixes: FixedVector<B256, U65536>,

//         // // Slashings
//         // #[serde(deserialize_with = "ssz_types::serde_utils::quoted_u64_fixed_vec::deserialize")]
//         // slashings: FixedVector<u64, U8192>,

//         // // Participation
//         // previous_epoch_participation: VariableList<u8, U1099511627776>,
//         // current_epoch_participation: VariableList<u8, U1099511627776>,

//         // // Finality
//         // justification_bits: BitVector<U4>,
//         // previous_justified_checkpoint: Checkpoint,
//         // current_justified_checkpoint: Checkpoint,
//         // finalized_checkpoint: Checkpoint,

//         // // Inactivity
//         // #[serde(deserialize_with = "ssz_types::serde_utils::quoted_u64_var_list::deserialize")]
//         // inactivity_scores: VariableList<u64, U1099511627776>,

//         // // Sync
//         // current_sync_committee: Arc<SyncCommittee>,
//         // next_sync_committee: Arc<SyncCommittee>,

//         // // Execution
//         // latest_execution_payload_header: ExecutionPayloadHeader,

//         // // Withdrawals
//         next_withdrawal_index: 0,
//         next_withdrawal_validator_index: 0,

//         // // Deep history valid from Capella onwards.
//         // historical_summaries: VariableList<HistoricalSummary, U16777216>,
//     }
// }
